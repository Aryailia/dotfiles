theme = "onelight"

[editor]
auto-format  = false
auto-pairs   = false
bufferline   = "multiple"
cursor-shape = { insert = "bar" } # Visual indication we are in insert mode
color-modes  = true
line-number  = "absolute"
rulers       = [81]
soft-wrap    = { enable = true } # I want all text displayed
true-color   = true
# highlight trailing whitespace: https://github.com/helix-editor/helix/issues/2719

lsp        = { display-messages = true }
# I want the branch name displayed
statusline = { left = ["mode", "file-name", "version-control", "spinner"] } 

################################################################################
# Key Mappings
################################################################################
[keys.normal]
esc   = ["collapse_selection", "keep_primary_selection"]
space = { q = ":quit", w = ":write", c = ":reload" }

### Multilingual support (Vim-barbaric): Swap to english for normal mode
# Fctix's model is your IME has two modes: active and deactived
# We always active on insert mode, and always deactivate on exiting insert mode
# As a result, you want to have two english keyboards, on
i     = [":sh fcitx-remote -o", ":sh fcitx5-remote -o", "collapse_selection", "insert_mode"]
a     = [":sh fcitx-remote -o", ":sh fcitx5-remote -o", "collapse_selection", "append_mode"]

# Vim muscle memory
"$"   = "extend_to_line_end"
0     = "extend_to_line_start"
"_"   = "goto_first_nonwhitespace"
"{"   = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}"   = ["extend_to_line_bounds", "goto_next_paragraph"]
C-r   = "redo"
D     = ["extend_to_line_end", "delete_selection"]
g     = { j = "move_visual_line_down", k = "move_visual_line_up" }
j     = "move_line_down"
k     = "move_line_up"
x     = "delete_selection"
","   = "extend_line_below" # To replace x

[keys.select]
"$"   = "extend_to_line_end"
0     = "extend_to_line_start"
"_"   = "goto_first_nonwhitespace"
o     = "flip_selections"
g     = { j = "extend_visual_line_down", k = "extend_visual_line_up" }
j     = "extend_line_down"
k     = "extend_line_up"
x     = "delete_selection"
","   = "extend_line_below"
esc   = ["collapse_selection", "keep_primary_selection", "normal_mode"]

### Multilingual support (Vim-barbaric): Swap to english for normal mode
[keys.insert]
esc   = [":sh fcitx-remote -c", ":sh fcitx5-remote -c", "normal_mode"]

# Snippets
[keys.insert.tab.s]
a     = ":insert-output tmux-window-output-to-buffer.sh snippets.sh"
s     = ":insert-output tmux-window-output-to-buffer.sh snippets.sh \"symbols\""
[keys.insert.tab]
tab   = ":insert-output tmux-window-output-to-buffer.sh snippets.sh \"$HX_EXT\""
#n     = ["search", "<>"]

# Clipboard and build integration
v     = "paste_clipboard_before"
[keys.normal."\\"]
q     = [":write", ":sh tmux-alt-pane.sh send-keys -X cancel", ":sh [ -n \"${TMUX}\" ] && tmux new-window -d build.sh background --temp \"$HX_PATH\""]
w     = [":write", ":sh tmux-alt-pane.sh send-keys -X cancel", ":sh tmux-alt-pane.sh send-keys \"build.sh build --temp \" \"$HX_PATH\" Enter"]
e     = [":write", ":sh tmux-alt-pane.sh send-keys -X cancel", ":sh tmux-editor-run.sh \"$HX_EXT\" \"$HX_PATH\""]
r     = ":sh tmux-alt-pane.sh send-keys -X cancel"
t     = ":sh tmux-alt-pane.sh kill-pane"
l     = ":sh tmux-alt-pane.sh send-keys \"build.sh lint \" \"$HX_PATH\" ENTER"
c     = "yank_main_selection_to_clipboard"
v     = "paste_clipboard_before"
