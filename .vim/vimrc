" the `autocmd!` deletes previous bindings if sourced again
" Pathogen for plugins:
  execute pathogen#infect()
  execute pathogen#helptags()


" General
augroup general
  autocmd!

  set nocompatible
  filetype plugin on
  syntax on
  set foldmethod=manual
  set encoding=utf-8
  " set ruler
  set nrformats-=octal
  set wildmenu
  " set formatoptions=tcq


  " improve syntax performance
  syntax sync minlines=256
  set nocursorcolumn
  set nocursorline


  " Opens new vertical and horizontal splits to bottom and right respectively
  set splitbelow
  set splitright

  " Autoindent settings for programming. These are set by sleuth plugin
  " set expandtab
  " set shiftwidth=2
  " set softtabstop=2

  " Marker for the ever popular and possibly archaic 80 column width
  " The colored column is not okay to include
  set colorcolumn=81
  highlight ColorColumn ctermfg=red ctermbg=cyan guibg=cyan

  " Toggle relativenumber depending on mode, or with shortcut in normal...
  " JK this kills performance
  set number
  " set relativenumber
  " autocmd InsertEnter * :set norelativenumber
  " autocmd InsertLeave * :set relativenumber
  " also have keybind to toggle this
augroup END


augroup pluginsettings
  " VimWiki
  let g:vimwiki_ext2syntax = {'.md': 'markdown', '.wiki': 'media'}
  " let g:vimwiki_folding = 'expr'
  let g:vimiwki_list = [{'path': '~/wiki/', 'syntax': 'markdown', 'ext': '.md'},
    \ {'path': '~/blog/test/', 'auto_toc': 1, 'index': 'index.wiki'}]

augroup END

augroup customplugin
  source ~/.vim/custom/tmuxpreview.vim
  source ~/.vim/custom/buildtools.vim
  source ~/.vim/custom/interlinks.vim
  " Need to execute cause of the dash
  execute 'source ~/.vim/custom/syntax-interlink.vim'

  noremap <C-J> gj
  noremap <C-K> gk

  noremap <leader>rn :set relativenumber!<CR>
  noremap <leader>rc :source $HOME/.vim/vimrc<CR>
  noremap <leader>ts :if exists("g:syntax_on")<bar>syntax off<bar>else<bar>syntax on<bar>endif<CR>
  noremap <leader>rs :write! !parsemarkdown.awk<CR>
  noremap <leader>hg :call PrintHighlightGroup()<CR>
  noremap <F1> :write<CR>
  noremap <F11> :call FollowCursorLink()<CR>
  noremap <F12> :call FollowBack()<CR>
  let g:terminal_execute = 'st -e'
augroup END

augroup compilable
  autocmd!
  imap <F1> <C-o><F1>
  " Not really sure how to fix non-silent other than using two enters
  imap <F2> <C-o><F2>
  imap <F3> <C-o><F3>
augroup END

augroup sh_build
  autocmd!
  " Use sh (usually maps to dash terminal) for better POSIX compliance
  autocmd FileType sh noremap <F2> :call BuildAndRun('/tmp/preview.sh', 'chmod 744 /tmp/preview.sh', 'sh /tmp/preview.sh')<CR><CR>
  autocmd FileType sh noremap <F3> :call PreviewOpenWindow(g:terminal_execute)<CR>
  autocmd FileType sh noremap <leader>l :call PreviewSendLine('shellcheck ' . expand('%:p'))<CR><CR>
augroup END

augroup rustbuild
  " au BufNewFile,BufRead *.rs set filetype=rust
  autocmd!
  autocmd FileType rust noremap <F2> :call BuildAndRun('/tmp/script.txt', 'rustc /tmp/script.txt -o %compiledfile', '%compiledfile')<CR><CR>
  autocmd FileType rust noremap <F3> :call PreviewOpenWindow(g:terminal_execute)<CR>
augroup END

augroup markdownbuild
  autocmd!
  " autocmd FileType markdown noremap <F2> :call PreviewSendLine('pandoc | lynx -stdin')<CR>
  " autocmd FileType markdown noremap <F3> :call PreviewOpenWindow(terminal_execute)<CR>
  autocmd FileType markdown noremap <F2> :silent w !pandoc -o /tmp/preview.pdf<CR>
  autocmd FileType markdown noremap <F3> :silent! !evince /tmp/preview.pdf &>/dev/null &<CR>:redraw!<CR>

  " vim-markdown-toc eats lines if ToC is folded
  autocmd BufWritePre *.md normal! zR
augroup END



" Snippets
augroup snippets
augroup END
